// controller/image.controller.js

import { GoogleGenAI } from '@google/genai';
import dotenv from 'dotenv';

dotenv.config();

// Gemini API key
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

// Generate image controller
export const generateImage = async (req, res) => {
  try {
    const { prompt } = req.body;
    
    if (!prompt) {
      return res.status(400).json({ 
        success: false, 
        message: 'Please provide an image prompt' 
      });
    }

    // Initialize Google Gemini API
    const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });

    console.log(`Generating image for prompt: "${prompt}"`);

    // Get the Modality enum from the package
    const { Modality } = await import('@google/genai');

    // Generate image
    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash-preview-image-generation",
      contents: prompt,
      config: {
        responseModalities: [Modality.TEXT, Modality.IMAGE],
      },
    });

    let imageData = null;
    let responseText = null;

    // Process response
    for (const part of response.candidates[0].content.parts) {
      if (part.text) {
        responseText = part.text;
      } else if (part.inlineData) {
        // Get the image data
        imageData = part.inlineData.data;
      }
    }

    if (!imageData) {
      return res.status(500).json({
        success: false,
        message: 'No image was generated by the API'
      });
    }

    // Instead of saving to file system, return the base64 data directly
    // This avoids file system write operations which don't work in read-only environments
    const imageUrl = `data:image/png;base64,${imageData}`;
    
    console.log('Image generated successfully, returning as base64 data URL');

    // Return response with the base64 data URL
    res.status(200).json({
      success: true,
      prompt,
      message: responseText || 'Image generated successfully',
      imageUrl: imageUrl
    });

  } catch (error) {
    console.error('Error generating image:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Error generating image', 
      error: error.message 
    });
  }
};